---
name: CI/CD

on:
  push:
    branches:
      - develop*
  pull_request:
    branches:
      - develop*

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. Docker CLI と Docker Compose プラグインの確認
      - name: Check Docker CLI version
        run: |
          docker --version
          docker compose version

      # 2. レポジトリを導入
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. 環境変数を設定
      - name: Set environment variables
        run: |
          echo "${{ secrets.MASTER_KEY }}" > backend/config/master.key
          echo "REACT_APP_AUTH_URL=${{ secrets.REACT_APP_AUTH_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_IN_URL=${{ secrets.REACT_APP_SIGN_IN_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_OUT_URL=${{ secrets.REACT_APP_SIGN_OUT_URL }}" >> frontend/.env.local
          echo "REACT_APP_PASSWORD_URL=${{ secrets.REACT_APP_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_UPDATE_PASSWORD_URL=${{ secrets.REACT_APP_UPDATE_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_LISTEN_AUTH_STATE_URL=${{ secrets.REACT_APP_LISTEN_AUTH_STATE_URL }}" >> frontend/.env.local
          echo "REACT_APP_MEDICINES_URL=${{ secrets.REACT_APP_MEDICINES_URL }}" >> frontend/.env.local
          echo "REACT_APP_POSTS_URL=${{ secrets.REACT_APP_POSTS_URL }}" >> frontend/.env.local
          echo "REACT_APP_CATEGORIES_URL=${{ secrets.REACT_APP_CATEGORIES_URL }}" >> frontend/.env.local
          echo "REACT_APP_WEBHOOK_URL=${{ secrets.REACT_APP_WEBHOOK_URL }}" >> frontend/.env.local

      # 4. Docker コンテナをビルドして起動
      - name: Build and run Docker containers
        run: |
          docker compose build --no-cache
          docker compose up -d

      # 5. データベース接続を待機 (MySQL が起動したか確認)
      - name: Wait for DB connection
        run: |
          for i in {1..120}; do
            docker compose exec -T db mysql -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1;" && break || sleep 5
          done

      # 6. Rails アプリケーションのヘルスチェックを待機 (/api/v1/up が 200 OK を返すまで)
      #- name: Wait for Rails health check
      #  run: |
      #    for i in {1..60}; do
      #      RESPONSE=$(docker compose exec -T back curl -s http://localhost:3000/api/v1/up)
      #      if echo "$RESPONSE" | grep -q '{"status":"up"}'; then
      #        echo "Rails health check passed."
      #        break
      #      else
      #        echo "Waiting for Rails health check... ($i/60)"
      #        sleep 5
      #      fi
      #    done
      #    if [[ "$RESPONSE" != *"\"status\":\"up\""* ]]; then
      #      echo "Rails health check failed after 60 retries."
      #      exit 1
      #    fi

      # 7. データベースのセットアップ
      - name: Create DB
        run: docker compose exec -T back rails db:create

      - name: Run migrations
        run: docker compose exec -T back rails db:migrate

      - name: Load seed data
        run: docker compose exec -T back rails db:seed

      # 8. 静的解析とテストの実行
      - name: Run Rubocop
        run: docker compose exec -T back bundle exec rubocop

      - name: Run RSpec
        run: docker compose exec -T back bin/rspec

      # 9. ESLint チェックを実行
      - name: Run ESLint
        run: docker compose exec -T front yarn lint:check

      # 10. Prettier チェックを実行
      - name: Run Prettier
        run: docker compose exec -T front yarn format:check
