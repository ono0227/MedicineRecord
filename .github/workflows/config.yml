---
name: CI/CD

on:
  push:
    branches:
      - develop*
  pull_request:
    branches:
      - develop*

jobs:
  ESLint-and-Prettier:
    name: ESLint and Prettier
    runs-on: ubuntu-latest

    steps:
      # 1. Docker CLI と Docker Compose プラグインの確認
      - name: Check Docker CLI version
        run: |
          docker --version
          docker compose version

      # 2. レポジトリを導入
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. 環境変数を設定
      - name: Set common environment variables
        id: set_envs
        run: |
          echo "REACT_APP_AUTH_URL=${{ secrets.REACT_APP_AUTH_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_IN_URL=${{ secrets.REACT_APP_SIGN_IN_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_OUT_URL=${{ secrets.REACT_APP_SIGN_OUT_URL }}" >> frontend/.env.local
          echo "REACT_APP_PASSWORD_URL=${{ secrets.REACT_APP_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_UPDATE_PASSWORD_URL=${{ secrets.REACT_APP_UPDATE_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_LISTEN_AUTH_STATE_URL=${{ secrets.REACT_APP_LISTEN_AUTH_STATE_URL }}" >> frontend/.env.local
          echo "REACT_APP_MEDICINES_URL=${{ secrets.REACT_APP_MEDICINES_URL }}" >> frontend/.env.local
          echo "REACT_APP_POSTS_URL=${{ secrets.REACT_APP_POSTS_URL }}" >> frontend/.env.local
          echo "REACT_APP_CATEGORIES_URL=${{ secrets.REACT_APP_CATEGORIES_URL }}" >> frontend/.env.local
          echo "REACT_APP_WEBHOOK_URL=${{ secrets.REACT_APP_WEBHOOK_URL }}" >> frontend/.env.local
          echo "${{ secrets.MASTER_KEY }}" > backend/temp_master.key

      # 4. Docker コンテナをビルドして起動 (フロントエンドのみ)
      - name: Build and run front container
        id: build_front
        run: |
          # フロントエンドのイメージが存在しない場合のみビルド
          if ! docker images -q front; then
            docker compose build --no-cache front
          fi
          docker compose up -d front
          # イメージIDを取得して出力
          IMAGE_ID=$(docker images -q front)
          echo "::set-output name=image_id::$IMAGE_ID"

      # 5. ESLint チェックを実行
      - name: Run ESLint
        run: docker run --rm -v ${{ github.workspace }}/frontend:/app front yarn lint:check

      # 6. Prettier チェックを実行
      - name: Run Prettier
        run: docker run --rm -v ${{ github.workspace }}/frontend:/app front yarn format:check

  Rspec-and-Rubocop:
    name: RSpec and Rubocop
    runs-on: ubuntu-latest

    steps:
      # 1. Docker CLI と Docker Compose プラグインの確認
      - name: Check Docker CLI version
        run: |
          docker --version
          docker compose version

      # 2. レポジトリを導入
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. 環境変数を設定
      - name: Set common environment variables
        id: set_envs
        run: |
          echo "REACT_APP_AUTH_URL=${{ secrets.REACT_APP_AUTH_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_IN_URL=${{ secrets.REACT_APP_SIGN_IN_URL }}" >> frontend/.env.local
          echo "REACT_APP_SIGN_OUT_URL=${{ secrets.REACT_APP_SIGN_OUT_URL }}" >> frontend/.env.local
          echo "REACT_APP_PASSWORD_URL=${{ secrets.REACT_APP_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_UPDATE_PASSWORD_URL=${{ secrets.REACT_APP_UPDATE_PASSWORD_URL }}" >> frontend/.env.local
          echo "REACT_APP_LISTEN_AUTH_STATE_URL=${{ secrets.REACT_APP_LISTEN_AUTH_STATE_URL }}" >> frontend/.env.local
          echo "REACT_APP_MEDICINES_URL=${{ secrets.REACT_APP_MEDICINES_URL }}" >> frontend/.env.local
          echo "REACT_APP_POSTS_URL=${{ secrets.REACT_APP_POSTS_URL }}" >> frontend/.env.local
          echo "REACT_APP_CATEGORIES_URL=${{ secrets.REACT_APP_CATEGORIES_URL }}" >> frontend/.env.local
          echo "REACT_APP_WEBHOOK_URL=${{ secrets.REACT_APP_WEBHOOK_URL }}" >> frontend/.env.local
          echo "${{ secrets.MASTER_KEY }}" > backend/temp_master.key

      # 4. Docker コンテナをビルドして起動
      - name: Build and run Docker containers
        run: |
          mkdir -p backend/config
          cp backend/temp_master.key backend/config/master.key
          docker compose build --no-cache
          docker compose up -d

      # 5. master.key を上書き
      - name: Override master.key
        run: |
          echo "${{ secrets.MASTER_KEY }}" > backend/config/master.key

      # 6. データベース接続を待機 (MySQL が起動したか確認)
      - name: Wait for DB connection
        run: |
          for i in {1..120}; do
            docker compose exec -T db mysql -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1;" && break || sleep 5
          done

      # 7. データベースのセットアップ
      - name: Create DB
        run: docker compose exec -T back rails db:create

      - name: Run migrations
        run: docker compose exec -T back rails db:migrate

      - name: Load seed data
        run: docker compose exec -T back rails db:seed

      # 8. 静的解析とテストの実行
      - name: Run Rubocop
        run: docker compose exec -T back bundle exec rubocop

      - name: Run RSpec
        run: docker compose exec -T back bin/rspec
