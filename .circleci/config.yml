version: 2.1

executors:
  default_container:
    docker:
      - image: cimg/ruby:3.2-node
        environment:
          BUNDLE_JOBS: 4
          BUNDLE_RETRY: 3
          BUNDLE_PATH: backend/vendor/bundle
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ROOT_PASSWORD: password
    working_directory: ~/medicine_record

  deploy_container:
    docker:
      - image: cimg/base:stable
    environment:
      AWS_REGION: ap-northeast-1
      BACKEND_ECR_REPO: medicinerecord-backend
      NGINX_ECR_REPO: medicinerecord-nginx

commands:
  install_ruby_dependencies:
    description: Install Ruby dependencies
    steps:
      - run:
          name: Install Bundler
          command: gem install bundler
      - run:
          name: Bundle Install
          working_directory: backend
          command: bundle install --jobs=4 --retry=3 --path vendor/bundle

  install_javascript_dependencies:
    description: Install Node.js dependencies
    steps:
      - run:
          name: Yarn Install
          working_directory: frontend
          command: yarn install --frozen-lockfile --network-concurrency 1

  setup_test_database:
    description: Setup MySQL database for testing
    steps:
      - run:
          name: Wait for MySQL to be ready
          working_directory: backend
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 180s
      - run:
          name: Create and Migrate Test Database
          working_directory: backend
          environment:
            RAILS_ENV: test
          command: |
            bundle install --path vendor/bundle
            bundle exec rails db:create
            bundle exec rails db:migrate
            bundle exec rails db:seed

  run_rspec:
    description: Run RSpec tests
    steps:
      - run:
          name: Run RSpec
          working_directory: backend
          environment:
            RAILS_ENV: test
          command: |
            bundle install --path vendor/bundle
            bundle exec rspec --format progress

  run_rubocop:
    description: Run Rubocop
    steps:
      - run:
          name: Run Rubocop
          working_directory: backend
          command: |
            bundle install --path vendor/bundle
            bundle exec rubocop --config .rubocop.yml --force-exclusion

  run_eslint_and_prettier:
    description: Run ESLint and Prettier
    steps:
      - run:
          name: Run ESLint
          working_directory: frontend
          command: yarn lint:check
      - run:
          name: Run Prettier
          working_directory: frontend
          command: yarn format:check

jobs:
  fetch_source_code:
    executor: default_container
    steps:
      - checkout
      - save_cache:
          key: v2-medicine_record-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/medicine_record

  install_dependencies:
    executor: default_container
    steps:
      - restore_cache:
          key: v2-medicine_record-{{ .Environment.CIRCLE_SHA1 }}
      - install_ruby_dependencies
      - install_javascript_dependencies
      - save_cache:
          key: v1-ruby-dependencies-{{ checksum "backend/Gemfile.lock" }}
          paths:
            - backend/vendor/bundle
      - save_cache:
          key: v1-node-dependencies-{{ checksum "frontend/yarn.lock" }}
          paths:
            - frontend/node_modules

  rspec:
    executor: default_container
    steps:
      - restore_cache:
          key: v2-medicine_record-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-ruby-dependencies-{{ checksum "backend/Gemfile.lock" }}
      - restore_cache:
          key: v1-node-dependencies-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Copy database.yml for CI
          working_directory: backend/config
          command: mv database.yml.ci database.yml
      - setup_test_database
      - run_rspec

  rubocop:
    executor: default_container
    steps:
      - restore_cache:
          key: v2-medicine_record-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-ruby-dependencies-{{ checksum "backend/Gemfile.lock" }}
      - run_rubocop

  eslint_and_prettier:
    executor: default_container
    steps:
      - restore_cache:
          key: v2-medicine_record-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-node-dependencies-{{ checksum "frontend/yarn.lock" }}
      - run_eslint_and_prettier

  deploy_fargate:
    executor: deploy_container
    steps:
      - checkout
      - run:
          name: Install AWS CLI & Docker
          command: |
            sudo apt-get update && sudo apt-get install -y unzip curl docker
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region=${AWS_REGION}" >> ~/.aws/config
      - run:
          name: Build React app and copy to nginx
          working_directory: frontend
          command: |
            yarn install --frozen-lockfile
            yarn build
            rm -rf ../nginx/html
            mkdir -p ../nginx/html
            cp -r build/* ../nginx/html/
      - run:
          name: Build and Push Backend Image
          command: |
            BACKEND_TAG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${BACKEND_ECR_REPO}:latest"
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            docker buildx build --platform linux/amd64 -t $BACKEND_TAG -f backend/Dockerfile ./backend --push

      - run:
          name: Build and Push Nginx Image
          command: |
            NGINX_TAG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${NGINX_ECR_REPO}:latest"
            docker buildx build --platform linux/amd64 -t $NGINX_TAG nginx --push

      - run:
          name: Update ECS Service (nginx and backend)
          command: |
            aws ecs update-service --cluster medicinerecord-cluster \
              --service api-service --force-new-deployment
            aws ecs update-service --cluster medicinerecord-cluster \
              --service nginx-service --force-new-deployment
      - run:
        name: Run DB Prepare
        command: |
          aws ecs execute-command \
            --cluster medicinerecord-cluster \
            --task $(aws ecs list-tasks --cluster medicinerecord-cluster --service-name backend-service --query "taskArns[0]" --output text) \
            --container backend \
            --command "bundle exec rails db:prepare RAILS_ENV=production" \
            --interactive

workflows:
  version: 2
  build_and_test:
    jobs:
      - fetch_source_code
      - install_dependencies:
          requires:
            - fetch_source_code
      - rspec:
          requires:
            - install_dependencies
      - rubocop:
          requires:
            - install_dependencies
      - eslint_and_prettier:
          requires:
            - install_dependencies
      - deploy_fargate:
          requires:
            - rspec
            - rubocop
            - eslint_and_prettier
          filters:
            branches:
              only:
                - master
